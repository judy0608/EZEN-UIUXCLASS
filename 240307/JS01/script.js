// 서버 & 통신 //

// ToDoList
// 기본적인 레이아웃 정렬
// DOM 사용자 데이터 값을 수신
// 의도한 화면 영역에 출력 이벤트 적용
// 사용자에게 수신받은 데이터 저장 기능

// 만약, 용량 큰 데이터를 받아서 처리해야하는 상황이라면?
// 어딘가에 문안 & 이미지 & 동영상 호스팅 -> 어딘가에서 가져다가 쓴다면?

// 서버 : 사용자가 입력한 데이터를 보관/처리하는 웹 상의 "가상 공간"

// 프론트엔드 개발자 : 사용자 데이터 + UI 레이아웃 설계 구현하는 작업
// 풀스택 | 백엔드 개발자 : 서버를 구현(구축)하고 데이터 비관계형 & 관계형 데이터 베이스를 설계해서 언제든지 데이터를 사용할 수 있도록 만드는 작업

// input 안에 들어온 아이디와 패스워드 값(=사용자에게 받은 데이터값),
// 서버 안에 약속이 존재. 약속을 지켜야만 서버에게 데이터를 보낼 수도, 받을 수도 있다.
// 약속 = 서버와의 통신 규약 = 프로토콜 = http
// HTTP = Hyper Text Tranfer Protocol
// https
// s = security : 보안 (최근에는 기본적으로 보안패치가 설치되어 있다)

// 서버 통산규약울 지켰다면 데이터를 가져오던가 || 전달하던가
// method=get : 서버에 특정 데이터를 요청하겠다.
// method=post : 서버에 특정 데이터를 전달하겠다.

// firebase Deploy
// 200 : 서버에 정상적으로 자료를 요청했고, 서버 역시 정상적으로 자료를 전송해주었다
// 404 : 서버에 어떤 데이터를 요청했는데, 그 데이터를 찾지 못할 때 서버가 알려주는 번호.
// 400 || 401 : 정상적으로 요청, 권한이 없는 경우 || 403 : 권한 요청이 없음에도 지속적으로 이 페이지에 접속하고자 할 때
// 503 : 정상적으로 서버에 데이터를 요청했으나, 서버가 정상적으로 작동할 수 없을을 알려주는 번호 -> 서버 다운

// JSON
// JSON 은 왜 필요할까? JavaScript Object Notation
// 자바스크립트 객체 표기법

const obj = {
  title: "title",
  price: 15000,
};

// 만약에 JS 언어 그대로를 가지고 서버를 구현하고 데이터 베이스를 구축할 수 있다면
// 프론트엔드 vs 백엔드의 차이가 X
// 태초에 자바스크립트 라는 언어는 웹 브라우저에서만 사용할 수 있도록 만든 한정적인 제약 언어이다. = 서버를 구축할 수 없다.
// 서버 구현 및 저장 데이터를 관리할 수 있도록 해주는 언어 = Java & C++ || C# || C언어 (전통적으로 서버에서 사용할 수 있는 언어들)
// 스마트폰의 발달로 UI 영역이 각광을 받은지 10여년 정도 밖에 안됨
// 서버 측 언어 JSON

const student = {
  name: "영심이",
  major: "체육교육",
  grade: 3,
};

// Javascript -> JSON
const json = JSON.stringify(student);

console.log(student);
console.log(json);

// JSON -> Javascript
const json_obj = JSON.parse(student_json);

// AJAX : 클라이언트 & 서버간 통신을 할 수 있도록 해주는 통신기법
// Asynchronous Javascript And XML
// Asynchronous : "비동기"적인
// XML : 과거 서버에서 실질적으로 사용할 수 있는 언어
// JSON은 언어를 의미하는 것이 아니라 자바스크립트 언어를 서버가 이해할 수 있도록 변환시켜주는 표기법 / 서버에서 가져온 데이터를 웹브라우저가 이해할 수 있도록 변환시켜주는 표기법
